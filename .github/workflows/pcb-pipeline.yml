name: PCB Automation Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'designs/**'
      - 'src/**'
      - 'examples/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'designs/**'
      - 'src/**'
      - 'examples/**'
  workflow_dispatch:
    inputs:
      design_file:
        description: 'Design file to process (relative to designs/)'
        required: true
        default: 'simple_led_board/spec.yaml'
      submit_order:
        description: 'Submit order to manufacturer'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'
  KICAD_VERSION: '8.0'

jobs:
  validate-designs:
    name: Validate Design Specifications
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Validate YAML specifications
      run: |
        python -c "
        import yaml
        from pathlib import Path
        
        errors = []
        for spec_file in Path('designs').rglob('*.yaml'):
            try:
                with open(spec_file) as f:
                    yaml.safe_load(f)
                print(f'✓ Valid: {spec_file}')
            except Exception as e:
                errors.append(f'✗ Invalid: {spec_file} - {e}')
                
        if errors:
            for error in errors:
                print(error)
            exit(1)
        "
    
    - name: Validate design specifications
      run: |
        python scripts/validate_designs.py designs/

  generate-pcb:
    name: Generate PCB Designs
    runs-on: ubuntu-latest
    needs: validate-designs
    
    strategy:
      matrix:
        design: 
          - simple_led_board/spec.yaml
          # Add more designs here as they're created
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Set up KiCad Docker
      run: |
        docker pull kicad/kicad:${{ env.KICAD_VERSION }}
    
    - name: Generate PCB design
      run: |
        python scripts/ci_pipeline.py \
          --design "designs/${{ matrix.design }}" \
          --output "artifacts/${{ matrix.design }}" \
          --validate \
          --export-gerbers
    
    - name: Upload PCB artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pcb-${{ matrix.design }}-${{ github.sha }}
        path: artifacts/${{ matrix.design }}/
        retention-days: 30
    
    - name: Generate design report
      run: |
        python scripts/generate_report.py \
          --design "designs/${{ matrix.design }}" \
          --output "reports/${{ matrix.design }}.md"
    
    - name: Upload design report
      uses: actions/upload-artifact@v3
      with:
        name: design-report-${{ matrix.design }}-${{ github.sha }}
        path: reports/${{ matrix.design }}.md

  test-pipeline:
    name: Test Pipeline Components
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install pytest pytest-cov
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src/pcb_pipeline --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  quote-comparison:
    name: Compare Manufacturer Quotes
    runs-on: ubuntu-latest
    needs: generate-pcb
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Download PCB artifacts
      uses: actions/download-artifact@v3
      with:
        pattern: pcb-*-${{ github.sha }}
        path: artifacts/
    
    - name: Compare manufacturer quotes
      run: |
        python scripts/compare_quotes.py \
          --designs artifacts/ \
          --output quotes-comparison.json
    
    - name: Post quote comparison
      if: github.event_name == 'push'
      run: |
        python scripts/post_to_slack.py \
          --webhook-url "${{ secrets.SLACK_WEBHOOK_URL }}" \
          --quotes-file quotes-comparison.json

  deploy-designs:
    name: Deploy to Design Repository
    runs-on: ubuntu-latest
    needs: [generate-pcb, test-pipeline]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: deploy/
    
    - name: Deploy to design repository
      run: |
        # Create deployment package
        tar -czf pcb-designs-${{ github.sha }}.tar.gz deploy/
        
        # Upload to releases or artifact repository
        echo "Would deploy to design repository"
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: PCB Designs ${{ github.ref }}
        body: |
          Automated PCB design generation for tag ${{ github.ref }}
          
          ## Generated Designs
          - All design specifications validated
          - PCB layouts generated and verified
          - Manufacturing files exported
          - Design rule checks passed
        draft: false
        prerelease: false

  submit-orders:
    name: Submit Manufacturing Orders
    runs-on: ubuntu-latest
    needs: [generate-pcb, quote-comparison]
    if: github.event.inputs.submit_order == 'true' || (github.event_name == 'push' && contains(github.event.head_commit.message, '[submit-order]'))
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Download PCB artifacts
      uses: actions/download-artifact@v3
      with:
        pattern: pcb-*-${{ github.sha }}
        path: artifacts/
    
    - name: Submit orders to manufacturers
      env:
        JLCPCB_API_KEY: ${{ secrets.JLCPCB_API_KEY }}
        JLCPCB_API_SECRET: ${{ secrets.JLCPCB_API_SECRET }}
      run: |
        python scripts/submit_orders.py \
          --designs artifacts/ \
          --manufacturer jlcpcb \
          --quantity 10 \
          --confirm
    
    - name: Post order confirmation
      run: |
        python scripts/post_to_slack.py \
          --webhook-url "${{ secrets.SLACK_WEBHOOK_URL }}" \
          --message "✅ PCB orders submitted successfully for commit ${{ github.sha }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report-${{ github.sha }}
        path: bandit-report.json

  notify:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [validate-designs, generate-pcb, test-pipeline]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.validate-designs.result == 'success' && needs.generate-pcb.result == 'success' && needs.test-pipeline.result == 'success' }}
      run: |
        echo "✅ PCB Pipeline completed successfully!"
        echo "Design files validated, PCBs generated, and tests passed."
    
    - name: Notify failure
      if: ${{ needs.validate-designs.result == 'failure' || needs.generate-pcb.result == 'failure' || needs.test-pipeline.result == 'failure' }}
      run: |
        echo "❌ PCB Pipeline failed!"
        echo "Check the logs for details."
        exit 1